// Generated by CoffeeScript 1.4.0
(function() {
  var Analysis, AreaOfInterest, Layer, Map, Pica, Polygon, Sidepanel, Workspace,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Map = (function() {

    function Map(domId, workspace, urlTemplate, defaultCenter, defaultZoom, tileLayerOptions) {
      if (defaultCenter == null) {
        defaultCenter = [0, 0];
      }
      if (defaultZoom == null) {
        defaultZoom = 2;
      }
      if (tileLayerOptions == null) {
        tileLayerOptions = {};
      }
      this.addPolygon = __bind(this.addPolygon, this);

      this.map = L.map(domId).setView(defaultCenter, defaultZoom);
      L.tileLayer(urlTemplate, tileLayerOptions).addTo(this.map);
      this.defineMapEventHandlers(this.map);
    }

    Map.prototype.defineMapEventHandlers = function(map) {
      (new L.Polygon.Draw(map, {})).enable();
      return map.on('draw:poly-created', this.addPolygon);
    };

    Map.prototype.addPolygon = function(polygonDrawEvent) {
      var aoi, mapPolygon;
      mapPolygon = polygonDrawEvent.poly;
      mapPolygon.addTo(this.map);
      aoi = this.workspace.currentAreaOfInterest();
      return aoi.addPolygon(polygonDrawEvent.poly.getLatLngs());
    };

    return Map;

  })();

  Sidepanel = (function() {

    function Sidepanel() {}

    return Sidepanel;

  })();

  Layer = (function() {

    function Layer() {}

    return Layer;

  })();

  Workspace = (function() {

    function Workspace(application, workspaceId) {
      this.application = application;
      this.workspaceId = workspaceId;
      if (this.workspaceId) {
        this.fetch();
      } else {
        this.initializeEmptyWorkspace();
      }
    }

    Workspace.prototype.fetch = function() {
      return $.getJSON("" + this.application.options.server_url + "/applications/1.json", this.parse);
    };

    Workspace.prototype.parse = function(data) {};

    Workspace.prototype.currentAreaOfInterest = function() {};

    return Workspace;

  })();

  AreaOfInterest = (function() {

    function AreaOfInterest() {}

    return AreaOfInterest;

  })();

  Polygon = (function() {

    function Polygon() {}

    return Polygon;

  })();

  Analysis = (function() {

    function Analysis() {}

    return Analysis;

  })();

  Pica = (function() {

    function Pica(options) {
      this.options = options != null ? options : {};
      this.createWorkspace();
      this.fetch();
    }

    Pica.prototype.renderMap = function(domId, urlTemplate) {
      return this.map = new Map(domId, this.workspace, urlTemplate);
    };

    Pica.prototype.renderSidepanel = function(domId) {
      return this.sidepanel = new Sidepanel(domId, this.workspace);
    };

    Pica.prototype.createWorkspace = function() {
      return this.workspace = new Workspace(this, this.getWorkspaceIdFromUrl());
    };

    Pica.prototype.fetch = function() {
      if (this.options.server_url) {
        return $.getJSON("" + this.options.server_url + "/apps/" + this.options.app_id + ".json", this.parse);
      }
    };

    Pica.prototype.parse = function(data) {
      var layer, _i, _len, _ref, _results;
      _ref = data.layers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        _results.push(this.layers << new Layer(this, layer));
      }
      return _results;
    };

    Pica.prototype.getWorkspaceIdFromUrl = function() {
      var match;
      match = this.getLocationHash().match(/workspace\/(\d+)/);
      if (match) {
        return match[1];
      }
      return null;
    };

    Pica.prototype.getLocationHash = function() {
      return window.location.hash;
    };

    return Pica;

  })();

  window.Pica = Pica;

}).call(this);
