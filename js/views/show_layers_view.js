/*
# ShowLayersView example documentation #

This is a module-level docstring, and will be displayed at the top of the module documentation.
Documentation generated by [CoffeeDoc](http://github.com/omarkhan/coffeedoc)
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define([], function() {
    var ShowLayersView;

    return ShowLayersView = (function() {
      function ShowLayersView(options) {
        this.removeTileLayers = __bind(this.removeTileLayers, this);
        this.render = __bind(this.render, this);        this.app = options.app;
        this.app.on('sync', this.render);
        this.tileLayers = {};
        this.layerControl = false;
      }

      ShowLayersView.prototype.render = function() {
        /*
        For every layer in @app.layers,
        we build a @tileLayers object, compatible with the arguments to
        L.control.layers, and, if we are not delegating the Layer Control 
        functionality to Pica, we simply add every layer to the map in order.
        */

        var layer, tileLayer, _i, _len, _ref;

        this.removeTileLayers();
        this.removeLayerControl();
        _ref = this.app.layers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          layer = _ref[_i];
          tileLayer = L.tileLayer(layer.tile_url);
          this.tileLayers[layer.display_name] = tileLayer;
          if (!this.app.config.delegateLayerControl) {
            tileLayer.addTo(this.app.config.map);
          }
        }
        if (this.app.config.delegateLayerControl) {
          return this.layerControl = this.renderLayerControl(this.app.config.map);
        }
      };

      ShowLayersView.prototype.renderLayerControl = function(map) {
        /*
        If we are delegating the Layer Control functionality to Pica:
        first we merge optional extra overlays from the config into 
        @tileLayers and then we show the first layer in the Layer Control.
        */

        var extraOverlays, layers;

        extraOverlays = this.app.config.extraOverlays || {};
        layers = $.extend(this.tileLayers, extraOverlays);
        this.showFirstOverlay(layers, map);
        return L.control.layers({}, layers).addTo(map);
      };

      ShowLayersView.prototype.showFirstOverlay = function(layers, map) {
        var layer, name;

        for (name in layers) {
          layer = layers[name];
          layer.addTo(map);
          return;
        }
      };

      ShowLayersView.prototype.removeTileLayers = function() {
        var name, tileLayer, _ref, _results;

        _ref = this.tileLayers;
        _results = [];
        for (name in _ref) {
          tileLayer = _ref[name];
          _results.push(this.app.map.removeLayer(tileLayer));
        }
        return _results;
      };

      ShowLayersView.prototype.removeLayerControl = function() {
        if (this.layerControl) {
          return this.layerControl.removeFrom(this.app.map);
        }
      };

      ShowLayersView.prototype.close = function() {
        this.removeTileLayers();
        this.removeLayerControl();
        return this.app.off('sync', this.render);
      };

      return ShowLayersView;

    })();
  });

}).call(this);
