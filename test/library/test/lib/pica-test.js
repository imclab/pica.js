// Generated by CoffeeScript 1.4.0
(function() {

  describe('Pica', function() {
    describe('#constructor()', function() {
      it('should call createWorkspace method', function() {
        var pica, stub;
        stub = sinon.stub(Pica.prototype, 'createWorkspace');
        pica = new Pica();
        assert(stub.calledOnce);
        return stub.restore();
      });
      return it('should call fetch method', function() {
        var pica, stub;
        stub = sinon.stub(Pica.prototype, 'fetch');
        pica = new Pica();
        assert(stub.calledOnce);
        return stub.restore();
      });
    });
    describe('#createWorkspace()', function() {
      return it('should create a new Workspace');
    });
    describe('#fetch()', function() {
      return it('should make an ajax call', function() {
        var pica, server, stub;
        server = sinon.fakeServer.create();
        server.respondWith("GET", "http://magpie.com/api/v1/applications/1.json", [
          200, {
            "Content-Type": "application/json"
          }, '{"layers": [{"id": 1, "display_name": "Mangroves"}]}'
        ]);
        stub = sinon.stub(Pica.prototype, 'parse');
        pica = new Pica({
          server_url: 'http://magpie.com/api/v1'
        });
        pica.fetch();
        server.respond();
        assert(stub.calledWith({
          layers: [
            {
              id: 1,
              display_name: "Mangroves"
            }
          ]
        }));
        return server.restore();
      });
    });
    describe('#parse()', function() {
      return it('should save layers');
    });
    return describe('#getWorkspaceIdFromUrl()', function() {
      describe('When there is a workspace_id on the URL', function() {
        return it('should return it', function() {
          var pica, stub;
          stub = sinon.stub(Pica.prototype, 'getLocationHash').returns('#workspace/1');
          pica = new Pica();
          assert.equal(pica.getWorkspaceIdFromUrl(), 1);
          return stub.restore();
        });
      });
      return describe("When there isn't a workspace_id on the URL", function() {
        return it('should return NULL', function() {
          var pica, stub;
          stub = sinon.stub(Pica.prototype, 'getLocationHash').returns('');
          pica = new Pica();
          assert.equal(pica.getWorkspaceIdFromUrl(), null);
          return stub.restore();
        });
      });
    });
  });

}).call(this);
